THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "new" is nil
8 February 2017 7:31:45.60226 am

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

UndefinedObject(Object)>>doesNotUnderstand: #new
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: receiver of "new" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

IWPControlPanel class>>DoIt
	Receiver: IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#aboutBtn->IWPControlPanel>>#aboutBtn #aboutBtn:...etc...
		format: 	65564
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPControlPanel
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'InstantWPControlPanel new openWithSpec '
		itsSelection: 	a Text for 'InstantWPControlPanel new openWithSpec '
		itsSelectionString: 	'InstantWPControlPanel new openWithSpec '
	Receiver's instance variables: 
		ast: 	DoIt
	^ InstantWPControlPanel new openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	IWPControlPanel
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	IWPControlPanel
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubEditingArea(Object)>>perform:orSendTo:
	Receiver: a RubEditingArea(912664576)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (608@69)
		owner: 	a TransformWithLayoutMorph(755337728)
		submorphs: 	an Array(a RubPrimarySelectionMorph(856640000) a RubCursor(368159232...etc...
		fullBounds: 	(0@0) corner: (608@69)
		color: 	Color transparent
		extension: 	a MorphExtension (752359936) [other:  (announcer -> an Announcer)]
		model: 	a RubScrolledTextModel
		paragraph: 	a RubCurrentLineBarDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(112146944)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Sans Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCommentMode
		cursor: 	a RubCursor(368159232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(912664576)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		evt: 	[(707@371) mouseUp 206815679 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		evt: 	[(707@371) mouseUp 206815679 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		evt: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(707@371) mouseUp 206815679 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(297075712)'Do it'
	Receiver's instance variables: 
		timeStamp: 	206815679
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(707@371)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a ToggleMenuItemMorph(297075712)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(707@371) mouseUp 206815679 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	206815679
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(707@371)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a ToggleMenuItemMorph(297075712)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a ToggleMenuItemMorph(297075712)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(297075712)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(668.0@359.0) corner: (873.0@376.0)
		owner: 	a MenuMorph(883748864)
		submorphs: 	#()
		fullBounds: 	(668.0@359.0) corner: (873.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (533489664)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a MenuMorph(883748864)
		localEvt: 	[(707@371) mouseUp 206815679 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(297075712)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(297075712)'Do it' a ToggleMenuItemMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(707@371) mouseUp 206815679 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	206815679
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(707@371)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a MenuMorph(883748864)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		aMorph: 	a MenuMorph(883748864)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(297075712)'Do it'


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(883748864)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(663.0@354.0) corner: (878.0@694.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(297075712)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(663.0@354.0) corner: (878.0@694.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (138711552) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(297075712)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(883748864)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(663.0@354.0) corner: (878.0@694.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(297075712)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(663.0@354.0) corner: (878.0@694.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (138711552) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(297075712)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(883748864)
	Arguments and temporary variables: 
		evt: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(663.0@354.0) corner: (878.0@694.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(297075712)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(663.0@354.0) corner: (878.0@694.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (138711552) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(297075712)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		focusHolder: 	a MenuMorph(883748864)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(707@371) corner: (723@387)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(707@371) corner: (723@387)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(707@371) mouseUp 206815679 nil]
		targetOffset: 	(39.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 206815679 707 371 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(234371072)
		priorEvent: 	[(707@371) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(20700160) a Naut...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		focusHolder: 	a MenuMorph(883748864)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(707@371) corner: (723@387)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(707@371) corner: (723@387)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(707@371) mouseUp 206815679 nil]
		targetOffset: 	(39.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 206815679 707 371 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		focusHolder: 	a MenuMorph(883748864)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(707@371) corner: (723@387)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(707@371) corner: (723@387)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(707@371) mouseUp 206815679 nil]
		targetOffset: 	(39.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 206815679 707 371 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(707@371) corner: (723@387)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(707@371) corner: (723@387)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(707@371) mouseUp 206815679 nil]
		targetOffset: 	(39.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 206815679 707 371 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(707@371) mouseUp 206815679 nil]
		evt: 	[(707@371) mouseUp 206815679 nil]
	Receiver's instance variables: 
		bounds: 	(707@371) corner: (723@387)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(707@371) corner: (723@387)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(707@371) mouseUp 206815679 nil]
		targetOffset: 	(39.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 206815679 707 371 0 0 0 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #new
IWPControlPanel class>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubEditingArea(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
DirectoryDoesNotExist: Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpanel' / 'images'
8 February 2017 7:32:10.187257 am

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

MacStore(FileSystemStore)>>signalDirectoryDoesNotExist:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpa...etc...
	Receiver's instance variables: 
		maxFileNameLength: 	255


[ store signalDirectoryDoesNotExist: path ] in FileSystem>>fileNamesAt:do:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'con...etc...
		aBlock: 	[ :path | out nextPut: path ]
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpan...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ store signalDirectoryDoesNotExist: path ]
		falseAlternativeBlock: 	[ entry at: 1 put: aPath basename.
presentBlock value: e...etc...
	Receiver's instance variables: 
true

MacStore(DiskStore)>>nodeAt:ifPresent:ifAbsent:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpa...etc...
		presentBlock: 	[ :entry | 
(self basicIsDirectory: entry)
	ifTrue: [ self basicE...etc...
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		entry: 	#badDirectoryPath
	Receiver's instance variables: 
		maxFileNameLength: 	255


MacStore(FileSystemStore)>>directoryAt:ifAbsent:nodesDo:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpa...etc...
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		aBlock: 	[ :entry | 
(self basicIsDirectory: entry)
	ifFalse: [ aBlock value: en...etc...
	Receiver's instance variables: 
		maxFileNameLength: 	255


MacStore(FileSystemStore)>>directoryAt:ifAbsent:fileNodesDo:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpa...etc...
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		aBlock: 	[ :entry | aBlock value: (store basenameFromEntry: entry) ]
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>fileNamesAt:do:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'con...etc...
		aBlock: 	[ :path | out nextPut: path ]
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpan...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut: path ] ] in FileSystem>>fileNamesAt:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'con...etc...
		out: 	a WriteStream
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut:...etc...
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		blockWithArg: 	[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut:...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


FileSystem>>fileNamesAt:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'con...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


FileReference(AbstractFileReference)>>files
	Receiver: File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images
	Arguments and temporary variables: 
		reference: 	File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpan...etc...


FileReference(AbstractFileReference)>>fileNames
	Receiver: File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'controlpan...etc...


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif...etc...
		dir: 	File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif
		files: 	nil
		choices: 	nil
		selection: 	nil
		newName: 	nil
		fileName: 	nil
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->StandardFileStream>>#actAsExecut...etc...
		format: 	65544
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/co...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.g...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif'
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/cont...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.g...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif'
		readOnly: 	true


[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
ActiveHand := priorHand.
ex pass ] in WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(234371072)
		priorEvent: 	[(694@372) mouseOver red nil nil]
		ex: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/controlpane...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(20700160) a Naut...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
ActiveHand := priorHand.
ex...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/controlp...etc...
	Receiver's instance variables: 
		outerContext: 	WorldMorph(PasteUpMorph)>>becomeActiveDuring:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/cont...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	WorldMorph(PasteUpMorph)>>becomeActiveDuring:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/cont...etc...
	Receiver's instance variables: 
		sender: 	WorldMorph(PasteUpMorph)>>becomeActiveDuring:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	...etc...


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.g...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif'
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif'
		fullName: 	'/Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.gif'
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->MultiByteFileStream>>#accepts: #ascii...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.g...etc...
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


ImageReadWriter class>>formFromFileNamed:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		fileName: 	File @ /Users/seamus/GitHub/InstantWP/core/controlpanel/images/logo.g...etc...
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel>>initializeLogo
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel>>initializeWidgets
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 
		anImage: 	an ImageModel
		versionInfoLabel: 	nil
		aSpace: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel(ComposableModel)>>initialize
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel class(Behavior)>>new
	Receiver: IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#aboutBtn->IWPControlPanel>>#aboutBtn #aboutBtn:...etc...
		format: 	65564
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPControlPanel
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel class>>DoIt
	Receiver: IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#aboutBtn->IWPControlPanel>>#aboutBtn #aboutBtn:...etc...
		format: 	65564
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPControlPanel
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'IWPControlPanel new openWithSpec '
		itsSelection: 	a Text for 'IWPControlPanel new openWithSpec '
		itsSelectionString: 	'IWPControlPanel new openWithSpec '
	Receiver's instance variables: 
		ast: 	DoIt
	^ IWPControlPanel new openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	IWPControlPanel
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	IWPControlPanel
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(912664576)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubEditingArea(Object)>>perform:orSendTo:
	Receiver: a RubEditingArea(912664576)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (608@69)
		owner: 	a TransformWithLayoutMorph(755337728)
		submorphs: 	an Array(a RubPrimarySelectionMorph(856640000) a RubCursor(368159232...etc...
		fullBounds: 	(0@0) corner: (608@69)
		color: 	Color transparent
		extension: 	a MorphExtension (752359936) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubCurrentLineBarDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(112146944)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Sans Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCommentMode
		cursor: 	a RubCursor(368159232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(912664576)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(225203200)'Do it'
	Arguments and temporary variables: 
		evt: 	[(694@372) mouseUp 206840290 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(665.0@359.0) corner: (870.0@376.0)
		owner: 	a MenuMorph(751880192)
		submorphs: 	#()
		fullBounds: 	(665.0@359.0) corner: (870.0@376.0)
		color: 	Color black
		extension: 	a MorphExtension (349725696)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(912664576)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0



--- The full stack ---
MacStore(FileSystemStore)>>signalDirectoryDoesNotExist:
[ store signalDirectoryDoesNotExist: path ] in FileSystem>>fileNamesAt:do:
True>>ifTrue:ifFalse:
MacStore(DiskStore)>>nodeAt:ifPresent:ifAbsent:
MacStore(FileSystemStore)>>directoryAt:ifAbsent:nodesDo:
MacStore(FileSystemStore)>>directoryAt:ifAbsent:fileNodesDo:
FileSystem>>fileNamesAt:do:
[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut: path ] ] in FileSystem>>fileNamesAt:
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
FileSystem>>fileNamesAt:
FileReference(AbstractFileReference)>>files
FileReference(AbstractFileReference)>>fileNames
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
ActiveHand := priorHand.
ex pass ] in WorldMorph(PasteUpMorph)>>becomeActiveDuring:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
ImageReadWriter class>>formFromFileNamed:
IWPControlPanel>>initializeLogo
IWPControlPanel>>initializeWidgets
IWPControlPanel(ComposableModel)>>initialize
IWPControlPanel class(Behavior)>>new
IWPControlPanel class>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubEditingArea(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: No value specified for key in section
12 February 2017 8:57:42.500228 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

INIFileSection(Object)>>error:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aString: 	'No value specified for key in section'
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'versioninfo'


[ self error: 'No value specified for key in section' ] in INIFileSection>>at:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		keyString: 	'QEMUVersion'
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'versioninfo'


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'QEMUVersion'
		aBlock: 	[ self error: 'No value specified for key in section' ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


INIFile>>section:at:ifAbsent:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'versioninfo'
		keyString: 	'QEMUVersion'
		absentBlock: 	[ self error: 'No value specified for key in section' ]
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>at:ifAbsent:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		keyString: 	'QEMUVersion'
		aBlock: 	[ self error: 'No value specified for key in section' ]
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'versioninfo'


INIFileSection>>at:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		keyString: 	'QEMUVersion'
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'versioninfo'


IWPConfig>>getValueForSectionAt:key:
	Receiver: an IWPConfig
	Arguments and temporary variables: 
		aSectionName: 	'versioninfo'
		aKey: 	'QEMUVersion'
		section: 	an INIFileSection
		value: 	nil
	Receiver's instance variables: 
		iniFile: 	an INIFile


IWPConfig class>>section:key:
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aSectionName: 	'versioninfo'
		aKey: 	'QEMUVersion'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getValueForSectionAt:key:->IWPConfig>>#getValue...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#ConfigDict->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPConfig class>>buildConfigDict
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aDict: 	a Dictionary(#AppDate->'2016' #AppName->'InstantWP' #AppPreferredName->'...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getValueForSectionAt:key:->IWPConfig>>#getValue...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#ConfigDict->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPEnvironment class>>startUp
	Receiver: IWPEnvironment
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPEnvironment
		classPool: 	a Dictionary(#Processes->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

CompiledMethod>>valueWithReceiver:arguments:
	Receiver: UndefinedObject>>#DoIt
	Arguments and temporary variables: 
		aReceiver: 	nil
		anArray: 	#()
	Receiver's instance variables: 
UndefinedObject>>#DoIt

[ aCompiledMethod
	valueWithReceiver: anObject
	arguments: (evalContext ifNil: [ #() ] ifNotNil: [ {evalContext} ]) ] in RubSmalltalkEditor>>debug:receiver:in:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aCompiledMethod: 	UndefinedObject>>#DoIt
		anObject: 	nil
		evalContext: 	nil
		guineaPig: 	nil
		context: 	nil
		debugSession: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(481242624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ aCompiledMethod
	valueWithReceiver: anObject
	arguments: (evalContext ifNil: [ #() ] ifN...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor>>debug:receiver:in:
		startpc: 	72
		numArgs: 	0



--- The full stack ---
INIFileSection(Object)>>error:
[ self error: 'No value specified for key in section' ] in INIFileSection>>at:
Dictionary>>at:ifAbsent:
INIFile>>section:at:ifAbsent:
INIFileSection>>at:ifAbsent:
INIFileSection>>at:
IWPConfig>>getValueForSectionAt:key:
IWPConfig class>>section:key:
IWPConfig class>>buildConfigDict
IWPEnvironment class>>startUp
UndefinedObject>>DoIt
CompiledMethod>>valueWithReceiver:arguments:
[ aCompiledMethod
	valueWithReceiver: anObject
	arguments: (evalContext ifNil: [ #() ] ifNotNil: [ {evalContext} ]) ] in RubSmalltalkEditor>>debug:receiver:in:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
12 February 2017 9:06:48.376795 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

IWPConfig class>>buildConfigDict
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aDict: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getValueForSectionAt:key:->IWPConfig>>#getValue...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#ConfigDict->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'IWPConfig buildConfigDict '
		itsSelection: 	a Text for 'IWPConfig buildConfigDict '
		itsSelectionString: 	'IWPConfig buildConfigDict '
	Receiver's instance variables: 
		ast: 	DoIt
	^ IWPConfig buildConfigDict
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubCursor(99549184) a RubPrimarySelectionMorph(233911296)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(961381888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64447555
		lastStepMessage: 	nil
		lastCycleTime: 	64447577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	64447555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64447555
		lastStepMessage: 	nil
		lastCycleTime: 	64447577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	64447555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64447555
		lastStepMessage: 	nil
		lastCycleTime: 	64447577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	64447555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
IWPConfig class>>buildConfigDict
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: IWPConfig class>>iniFile
12 February 2017 9:08:11.032034 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

IWPConfig class(Object)>>doesNotUnderstand: #iniFile
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aMessage: 	iniFile
		exception: 	MessageNotUnderstood: IWPConfig class>>iniFile
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getValueForSectionAt:key:->IWPConfig>>#getValue...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#ConfigDict->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPConfig class>>DoItIn:
	Receiver: IWPConfig
	Arguments and temporary variables: 
		ThisContext: 	IWPConfig class>>buildConfigDict
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getValueForSectionAt:key:->IWPConfig>>#getValue...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#ConfigDict->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self iniFile'
		itsSelection: 	a Text for 'self iniFile'
		itsSelectionString: 	'self iniFile'
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ self iniFile
		source: 	a ReadStream
		context: 	IWPConfig class>>buildConfigDict
		receiver: 	IWPConfig
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	IWPConfig
		ctxt: 	IWPConfig class>>buildConfigDict
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(278337536)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(278337536)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(449490432)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(449490432)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64530237
		lastStepMessage: 	nil
		lastCycleTime: 	64530259
		alarms: 	a Heap()
		lastAlarmTime: 	64530237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(563576320) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64530237
		lastStepMessage: 	nil
		lastCycleTime: 	64530259
		alarms: 	a Heap()
		lastAlarmTime: 	64530237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64530237
		lastStepMessage: 	nil
		lastCycleTime: 	64530259
		alarms: 	a Heap()
		lastAlarmTime: 	64530237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(234371072)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061820416))(a DropLis...etc...
		lastStepTime: 	64530237
		lastStepMessage: 	nil
		lastCycleTime: 	64530259
		alarms: 	a Heap()
		lastAlarmTime: 	64530237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(563576320) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(1046986240)
	Arguments and temporary variables: 
		aPoint: 	(513@366)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(278337536)
	Receiver's instance variables: 
		bounds: 	(511.0@358.0) corner: (726.0@654.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(402429952)'Run to here' a ToggleMenuI...etc...
		fullBounds: 	(511.0@358.0) corner: (726.0@654.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (105268224) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(148142592)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(1046986240)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(511.0@358.0) corner: (726.0@654.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(402429952)'Run to here' a ToggleMenuI...etc...
		fullBounds: 	(511.0@358.0) corner: (726.0@654.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (105268224) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(148142592)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(1046986240)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(511.0@358.0) corner: (726.0@654.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(402429952)'Run to here' a ToggleMenuI...etc...
		fullBounds: 	(511.0@358.0) corner: (726.0@654.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (105268224) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(148142592)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(1046986240)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(1046986240)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(511.0@358.0) corner: (726.0@654.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(402429952)'Run to here' a ToggleMenuI...etc...
		fullBounds: 	(511.0@358.0) corner: (726.0@654.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (105268224) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(148142592)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		evt: 	[(77@191) mouseDown yellow 64528431 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(77@191) mouseDown yellow 64528431 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(278337536)
	Receiver's instance variables: 
		timeStamp: 	64528431
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(77@191)
		handler: 	a RubEditingArea(278337536)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
		aMorph: 	a RubEditingArea(278337536)
		globalPt: 	(77@191)
		localEvt: 	[(77@191) mouseDown yellow 64528431 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(705293312)
		morphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312))
		handler: 	a RubEditingArea(278337536)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(449490432)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(77@191) mouseDown yellow 64528431 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	64528431
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(77@191)
		handler: 	a RubEditingArea(278337536)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
		aMorph: 	a RubEditingArea(278337536)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
		aMorph: 	a RubEditingArea(278337536)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(278337536)
	Arguments and temporary variables: 
		anEvent: 	[(77@191) mouseDown yellow 64528431 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@1342)
		owner: 	a TransformWithLayoutMorph(800119808)
		submorphs: 	an Array(a RubCursor(61411840) a RubPrimarySelectionMorph(705293312)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (992652288) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(74774016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(61411840)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(784049664))
		getMenuPolicy: 	a RubEditingArea(278337536)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
		aMorph: 	a TransformWithLayoutMorph(800119808)
		globalPt: 	(513@366)
		localEvt: 	[(77@191) mouseDown yellow 64528431 nil]
		index: 	1
		child: 	a RubEditingArea(278337536)
		morphs: 	an Array(a RubEditingArea(278337536))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(449490432)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(513@366) mouseDown yellow 64528431 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	64528431
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(513@366)
		handler: 	a RubScrolledTextMorph(449490432)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
		aMorph: 	a TransformWithLayoutMorph(800119808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
		aMorph: 	a TransformWithLayoutMorph(800119808)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(800119808)
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(436@308) corner: (1257@540)
		owner: 	a RubTextScrollPane(74774016)
		submorphs: 	an Array(a RubEditingArea(278337536))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (644619264) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-436@ -175))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(513@366) mouseDown yellow 64528431 nil]
		aMorph: 	a RubTextScrollPane(74774016)
		globalPt: 	(513@366)
		localEvt: 	[(513@366) mouseDown yellow 64528431 nil]
		index: 	2
		child: 	a TransformWithLayoutMorph(800119808)
		morphs: 	an Array(a RubScrollBar(64730624) a TransformWithLayoutMorph(800119808)...etc...
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(449490432)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
IWPConfig class(Object)>>doesNotUnderstand: #iniFile
IWPConfig class>>DoItIn:
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "iniFile" is nil
12 February 2017 9:26:02.617652 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

UndefinedObject(Object)>>doesNotUnderstand: #iniFile
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	iniFile
		exception: 	MessageNotUnderstood: receiver of "iniFile" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'config iniFile '
		itsSelection: 	a Text for 'config iniFile '
		itsSelectionString: 	'config iniFile '
	Receiver's instance variables: 
		ast: 	DoIt
	^ config iniFile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	65601837
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	65601839
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	65601837
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	65601839
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(506461184))(a FadingMorp...etc...
		lastStepTime: 	65601789
		lastStepMessage: 	nil
		lastCycleTime: 	65601769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65601789
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	65601839
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(506461184))(a FadingMorp...etc...
		lastStepTime: 	65601789
		lastStepMessage: 	nil
		lastCycleTime: 	65601769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65601789
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(506461184))(a FadingMorp...etc...
		lastStepTime: 	65601789
		lastStepMessage: 	nil
		lastCycleTime: 	65601769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65601789
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(506461184) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(506461184))(a FadingMorp...etc...
		lastStepTime: 	65601789
		lastStepMessage: 	nil
		lastCycleTime: 	65601769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65601789
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(506461184))(a FadingMorp...etc...
		lastStepTime: 	65601789
		lastStepMessage: 	nil
		lastCycleTime: 	65601769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65601789
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(506461184) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #iniFile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
12 February 2017 9:27:43.504578 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

[ :s | 
self halt.
s associations ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
self halt.
s associations ]
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| config |

config := IWPConfig new.
config iniFile sections d...etc...
		itsSelection: 	a Text for '| config |

config := IWPConfig new.
config iniFile s...etc...
		itsSelectionString: 	'| config |

config := IWPConfig new.
config iniFile sectio...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(35192320))(a FadingMorph...etc...
		lastStepTime: 	65702692
		lastStepMessage: 	nil
		lastCycleTime: 	65702714
		alarms: 	a Heap()
		lastAlarmTime: 	65702692
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(35192320) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(35192320))(a FadingMorph...etc...
		lastStepTime: 	65702692
		lastStepMessage: 	nil
		lastCycleTime: 	65702714
		alarms: 	a Heap()
		lastAlarmTime: 	65702692
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(35192320))(a FadingMorph...etc...
		lastStepTime: 	65702692
		lastStepMessage: 	nil
		lastCycleTime: 	65702714
		alarms: 	a Heap()
		lastAlarmTime: 	65702692
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(234371072)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(35192320))(a FadingMorph...etc...
		lastStepTime: 	65702692
		lastStepMessage: 	nil
		lastCycleTime: 	65702714
		alarms: 	a Heap()
		lastAlarmTime: 	65702692
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(35192320) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(1022843392)
	Arguments and temporary variables: 
		aPoint: 	(77@170)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(294710784)
	Receiver's instance variables: 
		bounds: 	(75.0@162.0) corner: (290.0@400.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1002494976)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(75.0@162.0) corner: (290.0@400.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (923083776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(135197696)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(1022843392)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(75.0@162.0) corner: (290.0@400.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1002494976)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(75.0@162.0) corner: (290.0@400.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (923083776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(135197696)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(1022843392)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(75.0@162.0) corner: (290.0@400.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1002494976)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(75.0@162.0) corner: (290.0@400.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (923083776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(135197696)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(1022843392)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(1022843392)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(75.0@162.0) corner: (290.0@400.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1002494976)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(75.0@162.0) corner: (290.0@400.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (923083776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(135197696)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		evt: 	[(42@85) mouseDown yellow 65701804 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(42@85) mouseDown yellow 65701804 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(294710784)
	Receiver's instance variables: 
		timeStamp: 	65701804
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(42@85)
		handler: 	a RubEditingArea(294710784)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
		aMorph: 	a RubEditingArea(294710784)
		globalPt: 	(42@85)
		localEvt: 	[(42@85) mouseDown yellow 65701804 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(177085440)
		morphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184))
		handler: 	a RubEditingArea(294710784)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(23441920)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(42@85) mouseDown yellow 65701804 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	65701804
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(42@85)
		handler: 	a RubEditingArea(294710784)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
		aMorph: 	a RubEditingArea(294710784)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
		aMorph: 	a RubEditingArea(294710784)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		anEvent: 	[(42@85) mouseDown yellow 65701804 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@145)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459154944))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@170) mouseDown yellow 65701804 nil]
		aMorph: 	a TransformWithLayoutMorph(33650176)
		globalPt: 	(77@170)
		localEvt: 	[(42@85) mouseDown yellow 65701804 nil]
		index: 	1
		child: 	a RubEditingArea(294710784)
		morphs: 	an Array(a RubEditingArea(294710784))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(23441920)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@170) mouseDown yellow 65701804 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(77@170) mouseDown yellow 65701804 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	65701804
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(77@170)
		handler: 	a RubScrolledTextMorph(23441920)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@170) mouseDown yellow 65701804 nil]
		aMorph: 	a TransformWithLayoutMorph(33650176)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(77@170) mouseDown yellow 65701804 nil]
		aMorph: 	a TransformWithLayoutMorph(33650176)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(33650176)
	Arguments and temporary variables: 
		anEvent: 	[(77@170) mouseDown yellow 65701804 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(35@85) corner: (1245@649)
		owner: 	a RubTextScrollPane(532304384)
		submorphs: 	an Array(a RubEditingArea(294710784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (847687680) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-35@ -85))
		smoothing: 	1
		localBounds: 	nil



--- The full stack ---
[ :s | 
self halt.
s associations ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
12 February 2017 9:30:24.978416 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

[ :a | 
self halt.
a inspect ] in [ :s | 
s
	associationsDo: [ :a | 
		self halt.
		a inspect ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
		a: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
nil

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
a inspect ]
		each: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


Array(SequenceableCollection)>>do:
	Receiver: {'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	1
	Receiver's instance variables: 
{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
a inspect ]
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


INIFile>>section:associationsDo:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'general'
		aBlock: 	[ :a | 
self halt.
a inspect ]
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>associationsDo:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
a inspect ]
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'general'


[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		a inspect ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		a inspect ] ]
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| config |

config := IWPConfig new.
config iniFile sections d...etc...
		itsSelection: 	a Text for '| config |

config := IWPConfig new.
config iniFile s...etc...
		itsSelectionString: 	'| config |

config := IWPConfig new.
config iniFile sectio...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1210@183)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(966621696))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	65864164
		lastStepMessage: 	nil
		lastCycleTime: 	65864186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65864164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	65864164
		lastStepMessage: 	nil
		lastCycleTime: 	65864186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65864164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	65864164
		lastStepMessage: 	nil
		lastCycleTime: 	65864186
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	65864164
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :a | 
self halt.
a inspect ] in [ :s | 
s
	associationsDo: [ :a | 
		self halt.
		a inspect ] ] in UndefinedObject>>DoIt
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
INIFile>>section:associationsDo:
INIFileSection>>associationsDo:
[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		a inspect ] ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
12 February 2017 9:39:22.111896 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript show: a value , Transcript cr ] in [ :s | 
s
	associationsDo: [ :a | 
		self halt.
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
		a: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
nil

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript s...etc...
		each: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


Array(SequenceableCollection)>>do:
	Receiver: {'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	1
	Receiver's instance variables: 
{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript s...etc...
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


INIFile>>section:associationsDo:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'general'
		aBlock: 	[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript s...etc...
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>associationsDo:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript s...etc...
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'general'


[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		Transcript show: a ke...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile sect...etc...
		itsSelection: 	a Text for '	| config |
	
	config := IWPConfig new.
	^ config ini...etc...
		itsSelectionString: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile ...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (677@221)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948685312))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	(135@20)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(981122048))(a DropList...etc...
		lastStepTime: 	66401326
		lastStepMessage: 	nil
		lastCycleTime: 	66401346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66401326
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(981122048))(a DropList...etc...
		lastStepTime: 	66401326
		lastStepMessage: 	nil
		lastCycleTime: 	66401346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66401326
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(981122048))(a DropList...etc...
		lastStepTime: 	66401326
		lastStepMessage: 	nil
		lastCycleTime: 	66401346
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66401326
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :a | 
self halt.
Transcript show: a key , Transcript cr.
Transcript show: a value , Transcript cr ] in [ :s | 
s
	associationsDo: [ :a | 
		self halt.
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
INIFile>>section:associationsDo:
INIFileSection>>associationsDo:
[ :s | 
s
	associationsDo: [ :a | 
		self halt.
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of ThreadSafeTranscript are not indexable
12 February 2017 9:39:50.818785 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

ThreadSafeTranscript(Object)>>error:
	Receiver: Transcript
	Arguments and temporary variables: 
		aString: 	'Instances of ThreadSafeTranscript are not indexable'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(271254016) a RubPluggableTextMorph...etc...
		announceur: 	an Announcer
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex
		deferredClear: 	false
		deferredEndEntry: 	false
		stepContents: 	'
UndefinedObject>>DoIt (config is Undeclared) 
'


ThreadSafeTranscript(Object)>>errorNotIndexable
	Receiver: Transcript
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(271254016) a RubPluggableTextMorph...etc...
		announceur: 	an Announcer
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex
		deferredClear: 	false
		deferredEndEntry: 	false
		stepContents: 	'
UndefinedObject>>DoIt (config is Undeclared) 
'


ThreadSafeTranscript(Object)>>size
	Receiver: Transcript
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(271254016) a RubPluggableTextMorph...etc...
		announceur: 	an Announcer
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex
		deferredClear: 	false
		deferredEndEntry: 	false
		stepContents: 	'
UndefinedObject>>DoIt (config is Undeclared) 
'


ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		start: 	17
		stop: 	16
		replacementCollection: 	Transcript
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'AppPreferredName'

ByteString(SequenceableCollection)>>,
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		otherCollection: 	Transcript
	Receiver's instance variables: 
'AppPreferredName'

[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a value , Transcript cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
		a: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
nil

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a valu...etc...
		each: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


Array(SequenceableCollection)>>do:
	Receiver: {'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	1
	Receiver's instance variables: 
{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a valu...etc...
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


INIFile>>section:associationsDo:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'general'
		aBlock: 	[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a valu...etc...
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>associationsDo:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a valu...etc...
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'general'


[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Transcrip...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile sect...etc...
		itsSelection: 	a Text for '	| config |
	
	config := IWPConfig new.
	^ config ini...etc...
		itsSelectionString: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile ...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (677@202)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(321340928))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66430039
		lastStepMessage: 	nil
		lastCycleTime: 	66430060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66430039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66430039
		lastStepMessage: 	nil
		lastCycleTime: 	66430060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66430039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66430039
		lastStepMessage: 	nil
		lastCycleTime: 	66430060
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66430039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ThreadSafeTranscript(Object)>>error:
ThreadSafeTranscript(Object)>>errorNotIndexable
ThreadSafeTranscript(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[ :a | 
Transcript show: a key , Transcript cr.
Transcript show: a value , Transcript cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
INIFile>>section:associationsDo:
INIFileSection>>associationsDo:
[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Transcript cr.
		Transcript show: a value , Transcript cr ] ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
12 February 2017 9:40:23.753876 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

Character(Object)>>error:
	Receiver: Character cr
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable'
	Receiver's instance variables: 
Character cr

Character(Object)>>errorNotIndexable
	Receiver: Character cr
	Arguments and temporary variables: 

	Receiver's instance variables: 
Character cr

Character(Object)>>size
	Receiver: Character cr
	Arguments and temporary variables: 

	Receiver's instance variables: 
Character cr

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		start: 	17
		stop: 	16
		replacementCollection: 	Character cr
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'AppPreferredName'

ByteString(SequenceableCollection)>>,
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		otherCollection: 	Character cr
	Receiver's instance variables: 
'AppPreferredName'

[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value , Character cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
		a: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
nil

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
		each: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


Array(SequenceableCollection)>>do:
	Receiver: {'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	1
	Receiver's instance variables: 
{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


INIFile>>section:associationsDo:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'general'
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>associationsDo:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'general'


[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile sect...etc...
		itsSelection: 	a Text for '	| config |
	
	config := IWPConfig new.
	^ config ini...etc...
		itsSelectionString: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile ...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (677@202)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(597537792))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	(363@172)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66462971
		lastStepMessage: 	nil
		lastCycleTime: 	66462993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66462971
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66462971
		lastStepMessage: 	nil
		lastCycleTime: 	66462993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66462971
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	66462971
		lastStepMessage: 	nil
		lastCycleTime: 	66462993
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66462971
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Character(Object)>>error:
Character(Object)>>errorNotIndexable
Character(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value , Character cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
INIFile>>section:associationsDo:
INIFileSection>>associationsDo:
[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Character are not indexable
12 February 2017 9:40:52.630375 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

Character(Object)>>error:
	Receiver: Character cr
	Arguments and temporary variables: 
		aString: 	'Instances of Character are not indexable'
	Receiver's instance variables: 
Character cr

Character(Object)>>errorNotIndexable
	Receiver: Character cr
	Arguments and temporary variables: 

	Receiver's instance variables: 
Character cr

Character(Object)>>size
	Receiver: Character cr
	Arguments and temporary variables: 

	Receiver's instance variables: 
Character cr

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		start: 	17
		stop: 	16
		replacementCollection: 	Character cr
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'AppPreferredName'

ByteString(SequenceableCollection)>>,
	Receiver: 'AppPreferredName'
	Arguments and temporary variables: 
		otherCollection: 	Character cr
	Receiver's instance variables: 
'AppPreferredName'

[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value , Character cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
		a: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
nil

[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
		each: 	'AppPreferredName'->'Default'
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


Array(SequenceableCollection)>>do:
	Receiver: {'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	1
	Receiver's instance variables: 
{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'InstantWP'. 'AppVersio...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary('AppDate'->'2016' 'AppName'->'InstantWP' 'AppPreferredName'->'Default' 'AppVe...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		tally: 	4
		array: 	{'AppPreferredName'->'Default'. 'AppDate'->'2016'. nil. 'AppName'->'Inst...etc...


INIFile>>section:associationsDo:
	Receiver: an INIFile
	Arguments and temporary variables: 
		label: 	'general'
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		sectionDictionaries: 	an OrderedCollection('general'->a Dictionary('AppDate'->'2...etc...


INIFileSection>>associationsDo:
	Receiver: an INIFileSection
	Arguments and temporary variables: 
		aBlock: 	[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value...etc...
	Receiver's instance variables: 
		iniFile: 	an INIFile
		label: 	'general'


[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
		s: 	an INIFileSection
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an INIFileSection an INIFileSection an INIFileSection an INIFileSection an INIFil...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		config: 	an IWPConfig
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile sect...etc...
		itsSelection: 	a Text for '	| config |
	
	config := IWPConfig new.
	^ config ini...etc...
		itsSelectionString: 	'	| config |
	
	config := IWPConfig new.
	^ config iniFile ...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| config |
	config := IWPConfig new.
	^ config iniFile sections
		do...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(294710784)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(294710784)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (677@202)
		owner: 	a TransformWithLayoutMorph(33650176)
		submorphs: 	an Array(a RubPrimarySelectionMorph(177085440) a RubCursor(99549184)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (382098944) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(532304384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(99549184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(611194368))
		getMenuPolicy: 	a RubEditingArea(294710784)
		mouseDownPoint: 	(474@213)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(23441920)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	66491854
		lastStepMessage: 	nil
		lastCycleTime: 	66491876
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66491854
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	66491854
		lastStepMessage: 	nil
		lastCycleTime: 	66491876
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66491854
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(976231936))(a SearchMorp...etc...
		lastStepTime: 	66491854
		lastStepMessage: 	nil
		lastCycleTime: 	66491876
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(99549184)))
		lastAlarmTime: 	66491854
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(539531776) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Character(Object)>>error:
Character(Object)>>errorNotIndexable
Character(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[ :a | 
Transcript show: a key , Character cr.
Transcript show: a value , Character cr ] in [ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
INIFile>>section:associationsDo:
INIFileSection>>associationsDo:
[ :s | 
s
	associationsDo: [ :a | 
		Transcript show: a key , Character cr.
		Transcript show: a value , Character cr ] ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
DirectoryDoesNotExist: Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
12 February 2017 10:13:36.589995 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

MacStore(FileSystemStore)>>signalDirectoryDoesNotExist:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
	Receiver's instance variables: 
		maxFileNameLength: 	255


[ store signalDirectoryDoesNotExist: path ] in FileSystem>>fileNamesAt:do:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'ima...etc...
		aBlock: 	[ :path | out nextPut: path ]
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ store signalDirectoryDoesNotExist: path ]
		falseAlternativeBlock: 	[ entry at: 1 put: aPath basename.
presentBlock value: e...etc...
	Receiver's instance variables: 
true

MacStore(DiskStore)>>nodeAt:ifPresent:ifAbsent:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
		presentBlock: 	[ :entry | 
(self basicIsDirectory: entry)
	ifTrue: [ self basicE...etc...
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		entry: 	#badDirectoryPath
	Receiver's instance variables: 
		maxFileNameLength: 	255


MacStore(FileSystemStore)>>directoryAt:ifAbsent:nodesDo:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		aBlock: 	[ :entry | 
(self basicIsDirectory: entry)
	ifFalse: [ aBlock value: en...etc...
	Receiver's instance variables: 
		maxFileNameLength: 	255


MacStore(FileSystemStore)>>directoryAt:ifAbsent:fileNodesDo:
	Receiver: a MacStore
	Arguments and temporary variables: 
		aPath: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
		absentBlock: 	[ store signalDirectoryDoesNotExist: path ]
		aBlock: 	[ :entry | aBlock value: (store basenameFromEntry: entry) ]
	Receiver's instance variables: 
		maxFileNameLength: 	255


FileSystem>>fileNamesAt:do:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'ima...etc...
		aBlock: 	[ :path | out nextPut: path ]
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut: path ] ] in FileSystem>>fileNamesAt:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'ima...etc...
		out: 	a WriteStream
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut:...etc...
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		blockWithArg: 	[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut:...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


FileSystem>>fileNamesAt:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'ima...etc...
	Receiver's instance variables: 
		workingDirectory: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' /...etc...
		store: 	a MacStore


FileReference(AbstractFileReference)>>files
	Receiver: File @ /Users/seamus/GitHub/InstantWP/core/images
	Arguments and temporary variables: 
		reference: 	File @ /Users/seamus/GitHub/InstantWP/core/images
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'


FileReference(AbstractFileReference)>>fileNames
	Receiver: File @ /Users/seamus/GitHub/InstantWP/core/images
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'seamus' / 'GitHub' / 'InstantWP' / 'core' / 'images'


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
		dir: 	File @ /Users/seamus/GitHub/InstantWP/core/images/logo.gif
		files: 	nil
		choices: 	nil
		selection: 	nil
		newName: 	nil
		fileName: 	nil
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->StandardFileStream>>#actAsExecut...etc...
		format: 	65544
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/im...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/imag...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
		fullName: 	'/Users/seamus/GitHub/InstantWP/core/images/logo.gif'
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->MultiByteFileStream>>#accepts: #ascii...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	File @ /Users/seamus/GitHub/InstantWP/core/images/logo.gif
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->FileStream>>#asBinaryOrTe...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Deprecated'
		traitComposition: 	{}
		localSelectors: 	nil


ImageReadWriter class>>formFromFileNamed:
	Receiver: ImageReadWriter
	Arguments and temporary variables: 
		fileName: 	File @ /Users/seamus/GitHub/InstantWP/core/images/logo.gif
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#atEnd->ImageReadWriter>>#atEnd #changePadOfBits...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadWriter. BMPReadWriter. GIFReadWriter. PluginBasedJPEGReadW...etc...
		name: 	#ImageReadWriter
		classPool: 	a Dictionary(#ImageNotStoredSignal->nil #MagicNumberErrorSignal->nil...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Graphics-Files'
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel>>initializeLogo
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel>>initializeWidgets
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 
		anImage: 	an ImageModel
		versionInfoLabel: 	nil
		aSpace: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel(ComposableModel)>>initialize
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	nil
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	nil
		wpFrontpageBtn: 	nil
		wpAdminBtn: 	nil
		pluginsBtn: 	nil
		themesBtn: 	nil
		mysqlBtn: 	nil
		docsBtn: 	nil
		advancedBtn: 	nil
		closeBtn: 	nil
		aboutBtn: 	nil
		logo: 	nil
		spacer: 	nil


IWPControlPanel class(Behavior)>>new
	Receiver: IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ComposableModel
		methodDict: 	a MethodDictionary(#aboutBtn->IWPControlPanel>>#aboutBtn #aboutBtn:...etc...
		format: 	65564
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPControlPanel
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'IWPControlPanel new openWithSpec '
		itsSelection: 	a Text for 'IWPControlPanel new openWithSpec '
		itsSelectionString: 	'IWPControlPanel new openWithSpec '
	Receiver's instance variables: 
		ast: 	DoIt
	^ IWPControlPanel new openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(632388608)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(632388608)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(955304960)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(632388608)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(662525440)
		submorphs: 	an Array(a RubCursor(329704960) a RubPrimarySelectionMorph(847215616...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (263067648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(951391744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(329704960)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(786635264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(955304960)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68455820
		lastStepMessage: 	nil
		lastCycleTime: 	68455842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(329704960)))
		lastAlarmTime: 	68455820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(801834496) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68455820
		lastStepMessage: 	nil
		lastCycleTime: 	68455842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(329704960)))
		lastAlarmTime: 	68455820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68455820
		lastStepMessage: 	nil
		lastCycleTime: 	68455842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(329704960)))
		lastAlarmTime: 	68455820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(801834496) a Na...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MacStore(FileSystemStore)>>signalDirectoryDoesNotExist:
[ store signalDirectoryDoesNotExist: path ] in FileSystem>>fileNamesAt:do:
True>>ifTrue:ifFalse:
MacStore(DiskStore)>>nodeAt:ifPresent:ifAbsent:
MacStore(FileSystemStore)>>directoryAt:ifAbsent:nodesDo:
MacStore(FileSystemStore)>>directoryAt:ifAbsent:fileNodesDo:
FileSystem>>fileNamesAt:do:
[ :out | self fileNamesAt: aResolvable do: [ :path | out nextPut: path ] ] in FileSystem>>fileNamesAt:
Array class(SequenceableCollection class)>>new:streamContents:
Array class(SequenceableCollection class)>>streamContents:
FileSystem>>fileNamesAt:
FileReference(AbstractFileReference)>>files
FileReference(AbstractFileReference)>>fileNames
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
ImageReadWriter class>>formFromFileNamed:
IWPControlPanel>>initializeLogo
IWPControlPanel>>initializeWidgets
IWPControlPanel(ComposableModel)>>initialize
IWPControlPanel class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #DocsPort not found in Dictionary
12 February 2017 10:16:57.457014 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		aKey: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


IWPConfig class>>at:
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aConfigKey: 	#DocsPort
		configSetting: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#configDict->IWPConfig>>#configDict #configDict:...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#UniqueInstance->an IWPConfig )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPEnvironment class>>docsWebPath
	Receiver: IWPEnvironment
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPEnvironment
		classPool: 	a Dictionary(#Processes->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel>>doAboutAction
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


[ self doAboutAction ] in IWPControlPanel>>initializeLabelButtons
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an IWPControlPanel
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ self doAboutAction ] ]
		labelHolder: 	a CollectionValueHolder[ 'About' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(727858176))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(727858176)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		event: 	[(625@483) mouseUp 68656647 nil]
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		evt: 	[(625@483) mouseUp 68656647 nil]
		all: 	an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(1751761...etc...
		m: 	a PluggableButtonMorph(727858176)
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(175176192) a PluggableB...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(175176192) a PluggableB...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		evt: 	[(625@483) mouseUp 68656647 nil]
		all: 	an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(1751761...etc...
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


MouseButtonEvent>>sentTo:
	Receiver: [(625@483) mouseUp 68656647 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(727858176)
	Receiver's instance variables: 
		timeStamp: 	68656647
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(625@483)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
	Receiver's instance variables: 
		bounds: 	(518.0@450.0) corner: (681.0@499.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(234371072)
		priorEvent: 	[(625@483) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(625@483) mouseUp 68656647 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(625@483) mouseUp 68656647 nil]
		evt: 	[(625@483) mouseUp 68656647 nil]
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		evt: 	[(625@483) mouseUp 68656647 nil]
		evtBuf: 	#(1 68656647 625 483 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(625@483.0) corner: (641@499.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(625@483.0) corner: (641@499.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(625@483) mouseUp 68656647 nil]
		targetOffset: 	(107.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 68656647 625 483 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(234371072)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68656636
		lastStepMessage: 	nil
		lastCycleTime: 	68656656
		alarms: 	a Heap()
		lastAlarmTime: 	68656636
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(234371072))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(234371072))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68656636
		lastStepMessage: 	nil
		lastCycleTime: 	68656656
		alarms: 	a Heap()
		lastAlarmTime: 	68656636
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68656636
		lastStepMessage: 	nil
		lastCycleTime: 	68656656
		alarms: 	a Heap()
		lastAlarmTime: 	68656636
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(676121600))(a DropList...etc...
		lastStepTime: 	68656636
		lastStepMessage: 	nil
		lastCycleTime: 	68656656
		alarms: 	a Heap()
		lastAlarmTime: 	68656636
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
IWPConfig class>>at:
IWPEnvironment class>>docsWebPath
IWPControlPanel>>doAboutAction
[ self doAboutAction ] in IWPControlPanel>>initializeLabelButtons
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #DocsPort not found in Dictionary
12 February 2017 10:22:47.190993 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		aKey: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


IWPConfig class>>at:
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aConfigKey: 	#DocsPort
		configSetting: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#configDict->IWPConfig>>#configDict #configDict:...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#UniqueInstance->an IWPConfig )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPEnvironment class>>docsWebPath
	Receiver: IWPEnvironment
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPEnvironment
		classPool: 	a Dictionary(#Processes->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel>>doDocsAction
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


[ self doDocsAction ] in IWPControlPanel>>initializeIconButtons
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an IWPControlPanel
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ self doDocsAction ] ]
		labelHolder: 	a CollectionValueHolder[ 'Help' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ Form(16x16x32) ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(525862400))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(525862400)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		event: 	[(724@304) mouseUp 69006431 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		evt: 	[(724@304) mouseUp 69006431 nil]
		all: 	an Array(a PluggableButtonMorph(525862400) a PluggableButtonMorph(75298816...etc...
		m: 	a PluggableButtonMorph(525862400)
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(525862400) a PluggableButtonMorph(75298816))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(525862400) a PluggableButtonMorph(75298816))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		evt: 	[(724@304) mouseUp 69006431 nil]
		all: 	an Array(a PluggableButtonMorph(525862400) a PluggableButtonMorph(75298816...etc...
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


MouseButtonEvent>>sentTo:
	Receiver: [(724@304) mouseUp 69006431 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(525862400)
	Receiver's instance variables: 
		timeStamp: 	69006431
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(724@304)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(525862400)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@281.0) corner: (912.0@331.0)
		owner: 	a PanelMorph(204168192)
		submorphs: 	an Array(an AlignmentMorph(146267648))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (568519680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	an IconicListItem(956049408)
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	an IconicListItem(956049408)
		iconMorph: 	nil
		iconPosition: 	#left


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
		focusHolder: 	a PluggableButtonMorph(525862400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(234371072)
		priorEvent: 	[(724@304) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(724@304) mouseUp 69006431 nil]
		focusHolder: 	a PluggableButtonMorph(525862400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
		focusHolder: 	a PluggableButtonMorph(525862400)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(724@304) mouseUp 69006431 nil]
		evt: 	[(724@304) mouseUp 69006431 nil]
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		evt: 	[(724@304) mouseUp 69006431 nil]
		evtBuf: 	#(1 69006431 724 304 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(724@304.0) corner: (740@320.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(724@304.0) corner: (740@320.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(525862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(724@304) mouseUp 69006431 nil]
		targetOffset: 	(53.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69006431 724 304 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(234371072)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69006423
		lastStepMessage: 	nil
		lastCycleTime: 	69006445
		alarms: 	a Heap()
		lastAlarmTime: 	69006423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(234371072))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(234371072))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69006423
		lastStepMessage: 	nil
		lastCycleTime: 	69006445
		alarms: 	a Heap()
		lastAlarmTime: 	69006423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69006423
		lastStepMessage: 	nil
		lastCycleTime: 	69006445
		alarms: 	a Heap()
		lastAlarmTime: 	69006423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69006423
		lastStepMessage: 	nil
		lastCycleTime: 	69006445
		alarms: 	a Heap()
		lastAlarmTime: 	69006423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
IWPConfig class>>at:
IWPEnvironment class>>docsWebPath
IWPControlPanel>>doDocsAction
[ self doDocsAction ] in IWPControlPanel>>initializeIconButtons
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #DocsPort not found in Dictionary
12 February 2017 10:22:50.365873 pm

VM: Mac OS - intel - 1096 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo5.0 [Latest update: #50768]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		aKey: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


Dictionary>>at:
	Receiver: a Dictionary('AboutIndexFile'->'about.html' 'AppDate'->'2016' 'AppName'->'InstantWP' 'AppP...etc...
	Arguments and temporary variables: 
		key: 	#DocsPort
	Receiver's instance variables: 
		tally: 	40
		array: 	{nil. nil. 'HTTP'->'80'. nil. nil. nil. 'DefaultSnapshot'->'default'. ni...etc...


IWPConfig class>>at:
	Receiver: IWPConfig
	Arguments and temporary variables: 
		aConfigKey: 	#DocsPort
		configSetting: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#configDict->IWPConfig>>#configDict #configDict:...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPConfig
		classPool: 	a Dictionary(#UniqueInstance->an IWPConfig )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPEnvironment class>>docsWebPath
	Receiver: IWPEnvironment
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IWPEnvironment
		classPool: 	a Dictionary(#Processes->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#InstantWP
		traitComposition: 	{}
		localSelectors: 	nil


IWPControlPanel>>doAboutAction
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


[ self doAboutAction ] in IWPControlPanel>>initializeLabelButtons
	Receiver: an IWPControlPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a ButtonModel a Bu...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		titleLabel: 	a LabelModel
		wpFrontpageBtn: 	a ButtonModel
		wpAdminBtn: 	a ButtonModel
		pluginsBtn: 	a ButtonModel
		themesBtn: 	a ButtonModel
		mysqlBtn: 	a ButtonModel
		docsBtn: 	a ButtonModel
		advancedBtn: 	a ButtonModel
		closeBtn: 	a ButtonModel
		aboutBtn: 	a ButtonModel
		logo: 	an ImageModel
		spacer: 	a LabelModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an IWPControlPanel
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ self doAboutAction ] ]
		labelHolder: 	a CollectionValueHolder[ 'About' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(727858176))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(727858176)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		event: 	[(514@361) mouseUp 69009623 nil]
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		evt: 	[(514@361) mouseUp 69009623 nil]
		all: 	an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(1751761...etc...
		m: 	a PluggableButtonMorph(727858176)
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(175176192) a PluggableB...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(175176192) a PluggableB...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		evt: 	[(514@361) mouseUp 69009623 nil]
		all: 	an Array(a PluggableButtonMorph(1053123584) a PluggableButtonMorph(1751761...etc...
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


MouseButtonEvent>>sentTo:
	Receiver: [(514@361) mouseUp 69009623 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(727858176)
	Receiver's instance variables: 
		timeStamp: 	69009623
		source: 	a HandMorph(234371072)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(514@361)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(727858176)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
	Receiver's instance variables: 
		bounds: 	(422.0@335.0) corner: (585.0@384.0)
		owner: 	a PanelMorph(1060456960)
		submorphs: 	an Array(an AlignmentMorph(63354880))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (893055488) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'About'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(824135680)
		iconMorph: 	nil
		iconPosition: 	#left


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(234371072)
		priorEvent: 	[(514@361) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(514@361) mouseUp 69009623 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
		focusHolder: 	a PluggableButtonMorph(727858176)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		anEvent: 	[(514@361) mouseUp 69009623 nil]
		evt: 	[(514@361) mouseUp 69009623 nil]
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(234371072)
	Arguments and temporary variables: 
		evt: 	[(514@361) mouseUp 69009623 nil]
		evtBuf: 	#(1 69009623 514 361 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(514@361.0) corner: (530@377.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(514@361.0) corner: (530@377.0)
		color: 	Color blue
		extension: 	a MorphExtension (703762432)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727858176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(514@361) mouseUp 69009623 nil]
		targetOffset: 	(92.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 69009623 514 361 0 0 0 1)
		lastKeyScanCode: 	36
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(234371072)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69009607
		lastStepMessage: 	nil
		lastCycleTime: 	69009627
		alarms: 	a Heap()
		lastAlarmTime: 	69009607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(234371072))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(234371072))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69009607
		lastStepMessage: 	nil
		lastCycleTime: 	69009627
		alarms: 	a Heap()
		lastAlarmTime: 	69009607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69009607
		lastStepMessage: 	nil
		lastCycleTime: 	69009627
		alarms: 	a Heap()
		lastAlarmTime: 	69009607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(234371072))
		viewBox: 	(0@0) corner: (1280@712)
		canvas: 	a FormCanvas on: DisplayScreen(1280x712x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(698715648))(a SearchMorp...etc...
		lastStepTime: 	69009607
		lastStepMessage: 	nil
		lastCycleTime: 	69009627
		alarms: 	a Heap()
		lastAlarmTime: 	69009607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@712)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(138915840) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (1280@712)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (937914368) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
IWPConfig class>>at:
IWPEnvironment class>>docsWebPath
IWPControlPanel>>doAboutAction
[ self doAboutAction ] in IWPControlPanel>>initializeLabelButtons
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

